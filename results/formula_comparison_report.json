{
  "monolith_formula_count": 795,
  "docs_formula_count": 206,
  "n_missing": 757,
  "n_paraphrased": 19,
  "missing_examples": [
    "$J = \\frac{\\partial F}{\\partial c}(\\bar x,\\bar c)",
    "& 28,725 & 25 & 24,164 & 0 \\\\",
    "& 4,990 integers & 0 violations & \\checkmark \\\\ Pathological Rarity (",
    "& 41,364 & 36 & 35,064 & 0 \\\\",
    "& 54,978 & 49 & 46,246 & 0 \\\\",
    "& 60/101 obstructions & 59.4\\ GAP 2 - mod",
    "& 63/101 obstructions & 62.4\\ GAP 2 - mod",
    "& 69/101 obstructions & 68.3\\ GAP 3 - Class confinement & 1001/1001 valid & 100.0\\ \\midrule \\textbf{Computation time} & \\multicolumn{2}{c}{0.94 seconds} \\\\ \\bottomrule \\end{tabular} \\end{center} \\textbf{Class distribution over 1001 iterations:} \\begin{itemize} \\item Class I (",
    "& 72,128 & 64 & 60,924 & 0 \\\\",
    "& 9 cases & 36\\ \\quad Class III & 7 cases & 28\\ \\bottomrule \\end{tabular} \\end{center} \\textbf{Key observation}: The trajectory visits Class III (",
    "& 92,097 & 81 & 77,448 & 0 \\\\ \\midrule \\textbf{TOTAL} & \\textbf{289,292} & \\textbf{81/81} & \\textbf{243,846} & \\textbf{0} \\\\ \\bottomrule \\end{tabular} \\end{center} \\vspace{1em} \\textbf{Validation Environment:} \\begin{itemize} \\item CPU: Intel Core i5-6500T @ 2.50GHz \\item Python: 3.12.6 \\item Total computation time:",
    "& \\checkmark No solutions & \\detokenize{test\\_extensions\\_*.json} \\\\ \\midrule \\multicolumn{3}{l}{extit{GAP 3: Trajectory Invariance}} \\\\ \\quad Iterations tested & 25 & \\multirow{2}{*}{\\detokenize{test\\_3gaps\\_*.json}} \\\\ \\quad Class violations & 0 & \\\\ \\quad Class coverage test & 100,000 numbers & \\detokenize{test\\_extensions\\_*.json} \\\\ \\quad Coverage completeness & 100.0\\ \\midrule \\textbf{Combined Assessment} & \\textbf{100\\ \\bottomrule \\end{tabular} \\end{center} \\textbf{Key Computational Certificates}: \\begin{itemize} \\item \\detokenize{test\\_3gaps\\_fast\\_20251020\\_174028.json} (SHA256: \\url{3EEF19D115CB06599D10E11E74F47BCCC6DEE14F6AC79DD32DBD1B66A08B7680}) \\item \\detokenize{test\\_extensions\\_20251020\\_184255.json} (SHA256: \\url{287DA611948D2AD29A65DACE5E43C7BB511A5C9C8EEA7A32BF6568E4D7EC5B51}) \\item \\detokenize{validation\\_results\\_aext[1-5].json} (previous validation) \\end{itemize} \\subsection{Comprehensive 1001-Iteration Validation} The definitive validation was performed using an enhanced test suite over 1001 iterations of the 196 trajectory: \\begin{center} \\begin{tabular}{@{}l c r@{}} \\toprule \\textbf{Test Component} & \\textbf{Result} & \\textbf{Success Rate} \\\\ \\midrule GAP 1 - C(d) bound & 0 violations & 100.0\\ GAP 1 - Floor bound & 357 violations & 16.8\\ GAP 2 - mod 2 obstruction & 0 failures & 100.0\\ GAP 2 - mod",
    "& \\checkmark \\\\ Class Distribution & 5,000 samples & 100\\ \\hline \\end{tabular} \\end{center} \\textbf{Detailed Statistical Analysis:} \\begin{itemize} \\item \\textbf{Exponential Growth}: Rate",
    "& \\textbf{Trajectory to 1675} \\\\ \\hline 196 &",
    "& \\textcolor{orange}{\\textbf{CONJECTURAL}} & Extrapolation (99.99\\ 196 is Lychrel & \\textcolor{orange}{\\textbf{CONJECTURAL}} & Combined evidence (99.99\\ \\bottomrule \\end{tabular} \\end{center} \\begin{remark}[On the Infinite Case] Complete rigorous proof for all",
    "(1,000,000) & 1,098 & 452 & 1,098/1,098 (100\\ \\bottomrule \\end{tabular} \\end{center} \\textbf{Interpretation:} The trajectory modulo",
    "(1,024) & 52 & 7 & 52/52 (100\\",
    "(10,000 Hensel proofs) \\item[\\checkmark] \\textbf{Jacobian structure}: Full row rank maintained across all 10,000 iterations \\item[\\checkmark] \\textbf{Growth behavior}: Exponential growth (",
    "(16)}: 6 iterations tested, no palindrome solutions found - \\textbf{Implication}: Confirms that no Hensel lifting is possible to higher moduli - \\textbf{Status}: \\checkmark Empirically validated obstruction \\subsection{Comprehensive 10,000-Iteration Trajectory Validation} \\label{subsec:10k_validation} We conducted an unprecedented computational validation of the 196 trajectory over 10,000 iterations, applying Hensel's Lemma with Jacobian verification at each step. This represents the most extensive rigorous mathematical analysis ever performed on a Lychrel candidate. \\subsubsection{Methodology} For each iteration",
    "(196): Jacobian is",
    "(4)}: 6 iterations tested, no palindrome solutions found - \\textbf{Mod",
    "(4,096) & 58 & 16 & 58/58 (100\\",
    "(8)}: 6 iterations tested, no palindrome solutions found - \\textbf{Mod",
    "(95\\",
    "(ALL",
    "(Theorem \\ref{thm:196_hensel-1}) to deduce the absence of lifts modulo",
    "(Theorem \\ref{thm:196_hensel-4}) to deduce the absence of lifts modulo",
    "(Theorem \\ref{thm:196_hensel}) to deduce absence of lifts modulo",
    "(\\bar{x}, \\bar{c})",
    "(a modulo",
    "(a_i, a_{d-1-i}) \\in \\{0,\\ldots,9\\}^2",
    "(and in particular to an integer solution) by Hensel lifting. \\end{lemma} \\begin{proof} The carry-equations are polynomial in the carry variables with integer coefficients (they encode local digit-wise balance constraints and carries). The Jacobian matrix computed modulo",
    "(as certified by the deterministic mod-2 verifier and the certificate constraints\\_mod2\\_196.txt and JSON file test\\_3gaps\\_enhanced\\_20251021\\_154322.json), then there exists no integer solution producing a palindrome for the seed",
    "(by monotonicity of entropy in support size for fixed probability distribution). Thus there exist at least 3 positions with distinct",
    "(comparable to random alphabet alignment) \\item At",
    "(examples: for",
    "(far beyond computational feasibility) \\item At",
    "(for instance via Gaussian elimination in",
    "(i.e.",
    "(i.e. its rank equals the number of independent equations in the reduced system), then the modular solution",
    "(i.e. there is no",
    "(i.e.,",
    "(i.e., there is no",
    "(mod 16) & 6 & 0 \\\\ \\bottomrule \\end{tabular} \\end{center} \\textbf{Result}: Confirms that modulo-2 obstruction \\textbf{cannot be lifted} to higher powers, supporting Theorem \\ref{thm:tower}. \\subsubsection{Complete Class Coverage} Random sampling of 100,000 integers with",
    "(mod 4) & 6 & 0 \\\\",
    "(mod 8) & 6 & 0 \\\\",
    "(no leading zeros). Writing the palindromicity constraints and digit-validity inequalities in the carry variables and reducing modulo 2 yields a small finite set of candidate binary carry-vectors. Each candidate can be checked by direct computation: computing the local sums",
    "(obstruction modulo",
    "(or absence modulo one of the two prime-power factors, combined with the Chinese remainder theorem) forbids existence modulo",
    "(or modulo",
    "(or the absence for one of the two factors, combined with the Chinese Remainder Theorem) forbids the existence of a solution modulo",
    "(or the absence modulo either factor, combined with the Chinese remainder theorem) precludes the existence of a solution modulo",
    "(or the absence modulo one of the factors, combined with the Chinese Remainder Theorem) forbids the existence of a solution modulo",
    "(or the absence modulo one of the two factors, combined with the Chinese Remainder Theorem) forbids a solution modulo",
    "(or the absence modulo one of the two factors, combined with the Chinese Remainder Theorem) forbids the existence of a solution modulo",
    "(or the absence modulo one of the two factors, combined with the Chinese remainder theorem) forbids the existence of a solution modulo",
    "(or their combination via the Chinese Remainder Theorem) forbids the existence of a solution modulo",
    "(resp.",
    "(see Lemma \\ref{lem:carry_bound}). This table was produced by exhaustive enumeration using the script \\detokenize{verifier/generate\\_Cd\\_table.py}. \\begin{table}[ht] \\centering \\caption{Maximum observed value of",
    "(that is,",
    "(the local carry-equations) for the tested digit-length",
    "(the standard Newton/Hensel step). If",
    "(threshold) for multiple consecutive iterations, circulation tends to remain positive:",
    ") & 10 dimensions & 10/10 bounds & \\checkmark \\\\ Modulo 2 Obstruction (196) & 5 candidates & 196 confirmed & \\checkmark \\\\ Persistence of 196 trajectory & 100 iterations & 0 violations & \\checkmark \\\\ Exponential Growth &",
    ") & 11 & \\multirow{3}{*}{\\detokenize{test\\_3gaps\\_*.json}} \\\\ \\quad Verified cases & 5 & \\\\ \\quad Success rate & 45.5\\ \\midrule \\multicolumn{3}{l}{extit{GAP 2: Hensel Lifting}} \\\\ \\quad Iterations checked & 25 & \\multirow{2}{*}{\\detokenize{test\\_3gaps\\_*.json}} \\\\ \\quad Obstructions found & 0 & \\\\ \\quad Modulo 5 obstruction & \\checkmark Confirmed & \\detokenize{test\\_extensions\\_*.json} \\\\ \\quad Hensel mod",
    ") & 196 \\\\ Maximum iterations & 10,000 (terminated at 25) \\\\ Maximum digit length & 12 \\\\ Test script & \\detokenize{test\\_gap123.py} \\\\ Certificate file & \\detokenize{test\\_3gaps\\_fast\\_20251020\\_174028.json} \\\\ Execution time & 0.003 seconds \\\\ \\bottomrule \\end{tabular} \\end{center} \\subsubsection{Detailed Results by Gap} \\paragraph{GAP 1: Quantitative Transfer} \\begin{center} \\begin{tabular}{@{}l c l@{}} \\toprule \\textbf{Metric} & \\textbf{Value} & \\textbf{Interpretation} \\\\ \\midrule Cases tested & 11 & (where",
    ") & 217,164 & 182,922 & 0 \\\\ III (",
    ") & 60--70\\ GAP 2 (mod 5) & 95\\ GAP 3 (trajectory) & 100\\ \\midrule \\textbf{Overall} & \\textbf{100\\ \\bottomrule \\end{tabular} \\end{center} \\begin{theorem}[Hensel lifting impossibility for 196]\\label{thm:hensel_impossibility_196} Let the carry-equations describing palindromic convergence for the reverse-and-add process be considered as a system of polynomial congruences in the integer carries. If there exists no solution to this system modulo",
    ") & 72,128 & 60,924 & 0 \\\\ II (",
    ") & 9,306 & 7,990 & 0 \\\\ \\midrule \\textbf{TOTAL} & \\textbf{298,598} & \\textbf{251,836} & \\textbf{0} \\\\ \\bottomrule \\end{tabular} \\end{center} This represents \\textbf{100\\ configurations for non-palindromic integers in the tested length range. \\end{proof} \\begin{corollary}[Universal Coverage]\\label{cor:universal_coverage} The persistence property has been validated across all 81 non-palindromic boundary configurations, representing 100\\ for external asymmetry in the tested length range",
    ") & Sustained over 10,000 iterations \\\\ Stable Jacobian structure & Full rank in 10,000/10,000 cases \\\\ Modular orbit analysis & 1,098 representatives verified \\\\ Multiple asymmetry measures & All consistent \\\\ \\midrule \\textbf{Combined confidence that 196 is Lychrel} & \\textbf{99.99\\ \\bottomrule \\end{tabular} \\end{center} In practical terms, the probability that 196 converges to a palindrome after iteration 9999 is vanishingly small, though not rigorously zero by current methods. \\begin{theorem}[Resolution of the Lychrel Conjecture] If a number admits no palindromic solution in any",
    ") & \\textcolor{green}{\\textbf{PROVEN}} & Rigorous proof \\\\ Jacobian non-degenerate (",
    ") & \\textcolor{green}{\\textbf{PROVEN}} & Symbolic verification \\\\ Hensel obstruction applies (",
    ") & \\textcolor{green}{\\textbf{PROVEN}} & Theorem \\ref{thm:196_trajectory_proven_10k} \\\\ \\midrule Obstruction persists for",
    ") If",
    ") \\\\ Violations detected & 6 & Expected for",
    ") \\\\ \\bottomrule \\end{tabular} \\end{center} \\textbf{Critical finding}: The floor bound",
    ") \\end{itemize} \\textbf{Commands to reproduce}: \\begin{verbatim} cd verifier python test_gap123.py --iterations 10000 --max_digits 12 python test_extensions.py --test_type all \\end{verbatim} \\textbf{Certificate files}: \\begin{itemize} \\item \\detokenize{test\\_3gaps\\_fast\\_20251020\\_174028.json} \\item \\detokenize{test\\_extensions\\_20251020\\_184255.json} \\end{itemize} \\subsection{Statistical Confidence} Based on the comprehensive validation results, we assess confidence levels for each gap as follows: \\begin{center} \\begin{tabular}{@{}l c l@{}} \\toprule \\textbf{Gap} & \\textbf{Confidence} & \\textbf{Basis} \\\\ \\midrule GAP 1 (C(d) bound) & 100\\ GAP 1 (floor bound) & 16.8\\ GAP 2 (mod 2) & 100\\ GAP 2 (mod",
    ") \\end{itemize} \\textbf{Conclusion:} The entire theoretical framework and all mathematical claims are validated by exhaustive computational verification. \\section{Trajectory Certificates and Verification Output} We summarize the verified reverse–and–add trajectories leading to the 196 orbit. All computations were performed by an external verifier script in the directory verifier/verify\\_orbit.py. The verification hash is provided for reproducibility. \\begin{center} \\begin{tabular}{rcl} \\textbf{Number} &",
    ") \\item \\textbf{GAP 1 violations}: 6 (expected for",
    ") \\item \\textbf{Stability}: Changes class after first iteration (T(196) = 196 + 691 = 887) \\item \\textbf{T(196) class}: II (",
    ") excludes any palindromic solution modulo",
    ") for all",
    ") generates internal perturbations that the carry mechanism cannot fully absorb. \\textbf{Empirical validation:} Up to d=12 digits, the transfer inequality",
    ") previously suggested obstruction rates; these historical observations are now superseded by Theorem~\\ref{thm:hensel_complete_all_k}, which establishes 100\\",
    ") seven times, but maintains",
    ") sustained throughout \\item[\\checkmark] \\textbf{Modular analysis}: 1,098 orbit representatives verified mod",
    ") there does not exist a palindromic solution to \\[ N+rev(N) \\equiv P \\pmod p. \\] Then for every",
    ") there does not exist a palindromic solution to \\[ N+rev(N)\\equiv P\\pmod p. \\] Then for all",
    ") there is no palindromic solution to",
    ") there is no palindromic solution to \\[ N + rev(N) \\equiv P \\pmod p. \\] Then for all",
    ") there is no palindromic solution to \\[ N + rev(N) \\equiv P \\pmod p. \\] Then for every",
    ") whose palindromic constraint system includes at least one non-zero constraint. \\end{theorem} \\section*{Numerical Certificates and Reproducibility} \\addcontentsline{toc}{section}{Numerical Certificates and Reproducibility} The repository accompanying this manuscript includes machine-readable certificates that document the computational verifications used throughout the text. In particular, we performed a modular-orbit analysis for the initial state",
    "), Lemma \\ref{lem:hensel_jacobian} would guarantee lifts to solutions modulo every",
    "), a lift to modulus",
    "), compounds to a 17-fold increase over 2000 steps, making palindromic convergence statistically impossible. \\end{conjecture} \\textbf{Quantitative Supporting Evidence:} \\begin{itemize} \\item \\textbf{Growth parameters}: Linear regression on",
    "), demonstrating that carry compensation cannot eliminate the robust invariant in near-critical configurations. Results: 60,924 non-palindromic cases, 0 failures. Complete verification: \\verb|validation_results_aext2.json| \\end{proof} \\begin{theorem}[Class III Persistence - Critical Gap Addressed] \\label{thm:persist_class_III} For any non-palindromic integer",
    "), then for every",
    "), then no palindromic solution exists modulo",
    "), there is no palindromic solution to \\[ N + rev(N) \\equiv P \\pmod p. \\] Then, for all",
    "). Complete logs and output files are available in the verifier/ directory (specifically \\detokenize{verifier/jacobian_palindrome_general_mod2k.log}); the script is reproducible with Python 3.12 (see the IMPORTANT/ bundle). \\section{Computational Validations: Empirical Evidence for Conjectures} To complement the theoretical results, we provide extensive computational validations of the key conjectures using optimized Python scripts. These tests confirm the persistence of obstructions and invariants up to digit length",
    "). If no Jacobian non-degeneracy hypothesis is available, the implication",
    "). If the Jacobian matrix",
    "). If, in addition, the system of congruences defining palindromicity can be formulated as a system of polynomial congruences in the carry variables for which every potential lift modulo",
    "). If, in addition, the system of congruences defining palindromicity can be realised as a system of polynomial congruences in the carry variables for which any potential lift modulo",
    "). If, in addition, the system of congruences defining palindromicity can be realised as a system of polynomial congruences in the carry variables for which every potential lift modulo",
    "). In the absence of verified non-degeneracy assumptions, the implication",
    "). In the absence of verified non-degeneracy hypotheses, the implication",
    "). \\begin{lemma}[Non-Existence by Reduction] Let",
    "). \\begin{lemma}[Non-existence by Reduction] Let",
    "). \\begin{lemma}[Non-existence by Reduction] \\label{lem:reduction_nonexist-10} Let",
    "). \\begin{lemma}[Non-existence by Reduction] \\label{lem:reduction_nonexist-11} Let",
    "). \\begin{lemma}[Reduction non-existence] Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-1} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-2} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-3} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-4} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-5} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-6} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-7} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-8} Let",
    "). \\begin{lemma}[Reduction non-existence] \\label{lem:reduction_nonexist-9} Let",
    "). \\end{enumerate} If the rank equals the number of unknown carry variables, the Jacobian is non-degenerate modulo",
    ").} \\begin{tabular}{@{}l l@{}} \\toprule \\textbf{File} & \\textbf{SHA256 Hash} \\\\ \\midrule \\detokenize{test\\_gap123.py} & \\url{d5638ebd1f9356f1f97476f67af0d0e2d92ad444e9e3e03b108816f745af2574} \\\\ \\detokenize{test\\_extensions.py} & \\url{c58b2991b58142b68010ab8e7a0d62d2309cd45c6ca96f38ab6d0086788e5c9e} \\\\ \\detokenize{test\\_3gaps\\_fast\\_20251020\\_174028.json} & \\url{0091efdbfb161ab5b7d5292845ec96cbf8d41d427e2c3edf3ab76be98f616228} \\\\ \\detokenize{test\\_3gaps\\_fast\\_20251020\\_183937.json} & \\url{80054520b1a1a4e4156914bb0884b7d025a06f40c11e8582dd3564da84720c03} \\\\ \\detokenize{test\\_extensions\\_20251020\\_184255.json} & \\url{287da611948d2ad29a65dace5e43c7bb511a5c9c8eea7a32bf6568e4d7ec5b51} \\\\ \\detokenize{validation\\_results\\_aext1.json} & \\url{b41ee8394e3799c49e4851fd573edac5f24d96fcdf311f4f94ee6d134efdfe31} \\\\ \\detokenize{validation\\_results\\_aext2.json} & \\url{9b21e6dcd0c4ba6cbbde9464f2dd93060a5e1d292f0f1a48376a86b7b434ebbe} \\\\ \\detokenize{validation\\_results\\_aext3.json} & \\url{206c23d8658597ad219cd9fe45abf4670f575bccd0a71b33094700265909f4e7} \\\\ \\detokenize{validation\\_results\\_aext4.json} & \\url{7b8fd723965517966a22ee4f1eeb04cd420ea20b8854178746457576fa7bb782} \\\\ \\detokenize{validation\\_results\\_aext5.json} & \\url{37ef75f6339257782e72ab9a9ba7484929a19f842d006b570feb200efd327f78} \\\\ \\detokenize{validation\\_results\\_aext9.json} & MISSING \\\\ \\detokenize{validation\\_results\\_class\\_III.json} & \\url{da734e44efa4eb27d7146782572d309802f1c4b1269226059690f5d5475d4afa} \\\\ \\detokenize{verifier/combined\\_certificates\\_196.json} & \\url{75c75f9041f62588ac5318464b4c1dcb7cc6e047da25813dbfea10a0d9d53ea3} \\\\ \\detokenize{verifier/gap3\\_window8.json} & \\url{69b1bf7a06413eb6f229d8972d32f101e2482e261b0d235862814f3ae3e85254} \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_150252.json} & \\url{6babef1ffba65e0623dff11ff5c4cb4f47a2f04ea214d6591c5e36bb6d6887b4} \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_150937.json} & \\url{5bb8a9dce5a7eb8adeb9a7aada41fefa81b2fe9c9af817eb25d4c909605b82b0} \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_152319.json} & \\url{56a340f3a1f51e9b4207363301efbf8bf166233df25e1a20567c48d042165ef5} \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_152328.json} & \\url{ddf7fc74fff64b5edebab5c5de0d4b5c98a804373a0d8b51c7780063003b85ec} \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_170050.json} & \\url{069af8b29478dc1468fa8fb77c4239c67c9e1ea9d4fa0e5c708d6c5f222de27c} \\\\ \\detokenize{verifier/test\\_3gaps\\_fast\\_20251020\\_170107.json} & \\url{e422330fd24658161e8859d0b95362f8ceef48f8a7fca414e0420bce8704862f} \\\\ \\detokenize{verifier/test\\_3gaps\\_fast\\_20251020\\_174028.json} & \\url{0091efdbfb161ab5b7d5292845ec96cbf8d41d427e2c3edf3ab76be98f616228} \\\\ \\detokenize{verifier/test\\_extensions\\_20251020\\_175123.json} & \\url{3eef19d115cb06599d10e11e74f47bccc6dee14f6ac79dd32dbd1b66a08b7680} \\\\ \\detokenize{verifier/test\\_extensions\\_20251020\\_175128.json} & \\url{3e12db4b0e27b4028cbb191d468cf44c66a4c4b22805b3677c34014851f9948d} \\\\ \\detokenize{verifier/validate\\_aext5.py} & \\url{f8e5b3943699bd485536685bfc0162d3f28651f6aa71975765bc06b4a5fe2ab8} \\\\ \\detokenize{verifier/verify\\_196\\_mod2.py} & \\url{3c2f161e243a52c0421b02ec891741dc8bf5bd23a9cf0fc08f7ea5fc3de6ab94} \\\\ \\detokenize{verifier/verify\\_196\\_modk.py} & c18a1cdb a28b8f0714e0bb7fbcbd e97d44192ae24f07ba496af8698e4f4d3433 \\\\ \\detokenize{verifier/test\\_gap123.py} & \\url{d5638ebd1f9356f1f97476f67af0d0e2d92ad444e9e3e03b108816f745af2574} \\\\ \\detokenize{verifier/test\\_extensions.py} & \\url{c58b2991b58142b68010ab8e7a0d62d2309cd45c6ca96f38ab6d0086788e5c9e} \\\\ \\detokenize{verifier/prove\\_a\\_ext\\_196.py} & \\url{ace024ff0c2ba40c4666df105aaff32c5efe12aa4acb9d9c1391cdfc6ed86ca3} \\\\ \\detokenize{validation\\_results\\_aext2.json} & 9b21e6dcd0c4ba6cbbde9464f2dd93060a5e1d292f0f1a48376a86b7b434ebbe \\\\ \\detokenize{validation\\_results\\_aext3.json} & 206c23d8658597ad219cd9fe45abf4670f575bccd0a71b33094700265909f4e7 \\\\ \\detokenize{validation\\_results\\_aext4.json} & 7b8fd723965517966a22ee4f1eeb04cd420ea20b8854178746457576fa7bb782 \\\\ \\detokenize{validation\\_results\\_aext5.json} & 37ef75f6339257782e72ab9a9ba7484929a19f842d006b570feb200efd327f78 \\\\ \\detokenize{validation\\_results\\_aext9.json} & MISSING \\\\ \\detokenize{validation\\_results\\_class\\_III.json} & da734e44efa4eb27d7146782572d309802f1c4b1269226059690f5d5475d4afa \\\\ \\detokenize{verifier/combined\\_certificates\\_196.json} & \\url{75c75f9041f62588ac5318464b4c1dcb7cc6e047da25813dbfea10a0d9d53ea3} \\\\ \\detokenize{verifier/gap3\\_window8.json} & \\url{69b1bf7a06413eb6f229d8972d32f101e2482e261b0d235862814f3ae3e85254} \\\\ \\detokenize{verifier/hensel\\_lift\\_results.json} & d0df4057d63e64541ebf315e92f0a01e915767d5aa0cf39c5bb663072209268b \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_150252.json} & 6babef1ffba65e0623dff11ff5c4cb4f47a2f04ea214d6591c5e36bb6d6887b4 \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_150937.json} & 5bb8a9dce5a7eb8adeb9a7aada41fefa81b2fe9c9af817eb25d4c909605b82b0 \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_152319.json} & 56a340f3a1f51e9b4207363301efbf8bf166233df25e1a20567c48d042165ef5 \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_152328.json} & ddf7fc74fff64b5edebab5c5de0d4b5c98a804373a0d8b51c7780063003b85ec \\\\ \\detokenize{verifier/test\\_3gaps\\_20251020\\_170050.json} & 069af8b29478dc1468fa8fb77c4239c67c9e1ea9d4fa0e5c708d6c5f222de27c \\\\ \\detokenize{verifier/test\\_3gaps\\_fast\\_20251020\\_170107.json} & e422330fd24658161e8859d0b95362f8ceef48f8a7fca414e0420bce8704862f \\\\ \\detokenize{verifier/test\\_3gaps\\_fast\\_20251020\\_174028.json} & \\url{0091efdbfb161ab5b7d5292845ec96cbf8d41d427e2c3edf3ab76be98f616228} \\\\ \\detokenize{verifier/test\\_extensions\\_20251020\\_175123.json} & \\url{3eef19d115cb06599d10e11e74f47bccc6dee14f6ac79dd32dbd1b66a08b7680} \\\\ \\detokenize{verifier/test\\_extensions\\_20251020\\_175128.json} & 3e12db4b0e27b4028cbb191d468cf44c66a4c4b22805b3677c34014851f9948d \\\\ \\detokenize{verifier/validate\\_aext5.py} & f8e5b3943699bd485536685bfc0162d3f28651f6aa71975765bc06b4a5fe2ab8 \\\\ \\detokenize{verifier/verify\\_196\\_mod2.py} & 3c2f161e243a52c0421b02ec891741dc8bf5bd23a9cf0fc08f7ea5fc3de6ab94 \\\\ \\detokenize{verifier/verify\\_196\\_modk.py} & c18a1cdb a28b8f0714e0bb7fbcbd e97d44192ae24f07ba496af8698e4f4d3433 \\\\ \\detokenize{verifier/test\\_gap123.py} & d5638ebd1f9356f1f97476f67af0d0e2d92ad444e9e3e03b108816f745af2574 \\\\ \\detokenize{verifier/test\\_extensions.py} & c58b2991b58142b68010ab8e7a0d62d2309cd45c6ca96f38ab6d0086788e5c9e \\\\ \\detokenize{verifier/prove\\_a\\_ext\\_196.py} & ace024ff0c2ba40c4666df105aaff32c5efe12aa4acb9d9c1391cdfc6ed86ca3 \\\\ \\bottomrule \\end{tabular} \\end{table} \\subsection*{How to reproduce the computational certificate} The computational certificate referenced in the main text is fully reproducible from the contents of the verifier/ directory. Below we provide the exact commands, checksums and environment information used to produce the results cited in this manuscript. \\paragraph{Key commands} Run the following in a PowerShell prompt from the repository root (Windows): \\begin{verbatim} cd 'f:\\\\Dossier_Lychrel_Important\\\\verifier' python .\\verify_196_mod2.py python .\\check_jacobian_mod2.py python .\\verify_196_modk.py --k-max 60 Get-Content .\\hensel_lift_results.json -Raw | Out-File ..\\\\Latex\\\\logs\\\\hensel_lift_results_2to60.json \\end{verbatim} \\paragraph{Files and SHA256 checksums} These exact file digests (SHA256) were recorded on October 19, 2025 on the machine used for verification. Re-running the above commands on the same repository contents will reproduce the certificate bit-for-bit. \\begin{itemize} \\item \\detokenize{verifier/verify\\_196\\_mod2.py}: 3c2f161e243a52c0421b02ec891741dc8bf5bd23a9cf0fc08f7ea5fc3de6ab94 \\item \\detokenize{verifier/check\\_jacobian\\_mod2.py}: 3cfe652b2e9d919ec6984dc683fde49816117c3368291f6e395e2204c18c00cc \\item \\detokenize{verifier/hensel\\_lift\\_results.json}: 8e4e1adc91e43bf04349e4a13dff186bda8ef5dbf19da36225ea170f6defe417 \\end{itemize} \\paragraph{Environment used for the verification} The computations were performed on a Windows machine with the following hardware and software snapshot: \\begin{itemize} \\item CPU: Intel(R) Core(TM) i5-6500T CPU @ 2.50GHz (4 cores / 4 logical processors) \\item Python: Python 3.12.6 \\item LaTeX: MiKTeX (pdfTeX) used to compile the manuscript PDF \\end{itemize} \\paragraph{Notes on determinism and reproducibility} The verification scripts are deterministic and rely only on integer arithmetic and exhaustive enumeration; therefore their outputs are bit-for-bit reproducible when run on the same repository snapshot with the same Python version. For reproducibility across different platforms, we recommend running the scripts on a modern CPython interpreter (3.10+) and checking the SHA256 digests above before trusting results. \\paragraph{Repository pointers} All scripts and logs referenced in this certificate are included in the repository under the verifier/ directory. The primary outputs are the log files \\detokenize{hensel\\_lift\\_results.json} and the printed outputs of the verification scripts; these are sufficient to verify the claims in the manuscript. \\subsection*{Non-degenerate Jacobian minors for iterates",
    "): 1,089 numbers (1.1\\ \\item \\textbf{Implication}: The partition \\{I, II, III\\} covers all integers \\item \\textbf{Status}: \\checkmark Complete coverage empirically verified \\end{itemize} \\subsubsection{Class Stability Analysis} Analysis of trajectory stability for 196: \\begin{itemize} \\item \\textbf{Initial class}: I (",
    "): 309 iterations (30.9\\ \\item Class II (",
    "): 320 iterations (32.0\\ \\end{itemize} \\textbf{Certificate file:} \\detokenize{test\\_3gaps\\_enhanced\\_20251021\\_154322.json} \\textbf{Key findings:} \\begin{itemize} \\item The alternative carry bound C(d) succeeds where the floor bound fails \\item Zero violations of C(d) over 1001 iterations proves GAP 1 empirically \\item Persistent modular obstruction mod 2 with 100\\ \\item Complete trajectory confinement to validated asymmetry classes \\end{itemize} \\begin{center} \\detokenize{test\\_3gaps\\_enhanced\\_20251021\\_154322.json} (SHA256: d8cb97cc5fc7b1cfc9c35e7e6c0402cefbc8b92906f1556cd3eb0a024f0fd2af) \\end{center} All certificates are reproducible using scripts in verifier/ directory. \\section*{Numerical Appendix} \\addcontentsline{toc}{section}{Numerical Appendix} The table below lists, for",
    "): 371 iterations (37.1\\ \\item Class II* (boundary): 1 iteration (0.1\\ \\item Class III (",
    "): 8,910 numbers (8.9\\ \\item \\textbf{Class III} (",
    "): 90,001 numbers (90.0\\ \\item \\textbf{Class II} (",
    "): No Hensel lifting possible to higher powers of 2 - Mod",
    "): No Hensel lifting possible to higher powers of 2 \\textbf{Theoretical foundation:} The Jacobian matrix J of the palindromic constraints has determinant zero modulo 2, preventing any local solution from lifting to higher moduli. \\textbf{Status:} \\checkmark Empirically validated with strong theoretical foundation. \\subsection{GAP 3: Trajectory Confinement} \\textbf{What it proves:} The trajectory of 196 is permanently confined to asymmetry classes that are disjoint from the set of palindromes. No path exists from these classes to palindromic convergence. \\textbf{Empirical validation:} - Complete coverage: Classes I, II, III partition all integers (tested on 100,000 numbers) - Trajectory confinement: 196's trajectory remains in validated classes (I→II transition observed) - Stability: Classes are preserved under sufficient iterations of T \\textbf{Theoretical foundation:} The asymmetry measures",
    "): orbit size 52; all 52 representatives were checked and classified theoretical\\_by\\_hensel. \\item",
    "): orbit size 58; all 58 representatives were checked and classified theoretical\\_by\\_hensel. \\item",
    ")}{Hensel Lifting Tests mod 2^k (k >= 2)}} Extended testing of Hensel lifting modulo higher powers of 2: - \\textbf{Mod",
    ", a configuration with no Jacobian constraints (\"n\\_constraints = 0\") and the boolean value exttt{full\\_row\\_rank = true} in the JSON summary. Important remark: the absence of constraints means that the numerical rank verification is vacuously satisfied (there are no constraint rows to check) — this situation is formally correct but does not provide non-trivial information about the Jacobian's structure for richer states. In practice, to obtain a useful extension theorem one must analyze states (or iterations",
    ", actual=",
    ", and a palindrome modulo",
    ", and by the Chinese Remainder Theorem excludes palindromic solutions modulo",
    ", and by the Chinese Remainder Theorem, it excludes palindromic solutions modulo",
    ", and by the Chinese remainder theorem excludes palindromic solutions modulo",
    ", and carry constraints must align. With",
    ", and hence, by the above lemma and the CRT, the absence of solutions modulo",
    ", and hence, by the lemma above and CRT, the absence of solutions modulo",
    ", and hence, by the lemma above and the CRT, absence of solutions modulo",
    ", and the Jacobian determinant is non-zero modulo",
    ", and the obstruction is stable under all Hensel lifts. \\end{theorem} \\begin{proof} We write",
    ", and thus, by the above lemma and the CRT, the absence of solutions modulo",
    ", and thus, by the lemma above and CRT, absence of solutions modulo",
    ", and thus, by the lemma above and the CRT, the absence of solutions modulo",
    ", and thus, by the previous lemma and the CRT, the absence of solutions modulo",
    ", but remain within validated classes \\end{itemize} - \\textbf{Status}: \\checkmark Trajectory confinement confirmed \\subsection{Implications for the Complete Proof} These extended validations provide strong empirical evidence that: 1. **GAP 2 Extension**: Modular obstructions persist beyond modulo 2, supporting the impossibility of Hensel lifting to any modulus. 2. **GAP 3 Completeness**: The asymmetry classes provide a complete partition of",
    ", consider the number",
    ", consistent with conjecture) \\item \\textbf{GAP 2 obstructions}: 0 found (persistent modulo-2 obstruction confirmed) \\item \\textbf{GAP 3 violations}: 0 (trajectory remains in validated classes) \\end{itemize} These results empirically validate the quantitative transfer and trajectory invariance conjectures up to",
    ", define the obstruction function:",
    ", demonstrating fundamental rather than accidental obstruction \\item \\textbf{Reproducibility}: Complete computational certificates with deterministic scripts enable independent verification \\item \\textbf{Generalizability}: Framework immediately applicable to other Lychrel candidates (295, 394, 493, 592, 689, 790, 887, 986, etc.) \\end{enumerate} \\subsubsection{Remaining Theoretical Gap} While our results are rigorous for",
    ", extension to",
    ", forcing carry",
    ", giving single-value distribution. (4) Maximum entropy when all",
    ", hence by the lemma above and the CRT, the absence of solutions modulo",
    ", hence to an integer solution. \\end{proof} \\begin{proof}[Proof of Theorem \\ref{thm:hensel_impossibility_196}] Assume for contradiction that there exists an integer carry assignment",
    ", i.e.",
    ", i.e. the obstruction persists for all tested powers",
    ", if",
    ", if there exists an obstruction modulo",
    ", implying",
    ", its digit length and an explicit choice of column indices whose corresponding",
    ", measuring total asymmetry change. \\end{definition} \\begin{theorem}[Circulation Persistence Under High Flux]\\label{thm:circ_persist} If",
    ", needs verification) \\item \\textbf{Implication}: Classes are not necessarily stable under",
    ", preventing palindromic convergence \\end{enumerate} Each verification constitutes a rigorous \\textit{theoretical proof} for that specific iteration, not merely an empirical test. \\subsubsection{Results Summary} \\begin{center} \\begin{tabular}{@{}l r@{}} \\toprule \\textbf{Metric} & \\textbf{Value} \\\\ \\midrule Total iterations tested & 10,000 \\\\ Rigorous Hensel proofs & 10,000 (100\\ Jacobian full row rank & 10,000 (100\\ Empirical failures & 0 \\\\ Cases requiring manual verification & 0 \\\\ \\midrule Final digit count (j=9999) & 4,159 digits \\\\ Average growth rate & 0.4159 digits/iteration \\\\ Exponential growth factor &",
    ", providing strong empirical support for the Lychrel nature of 196. \\subsection{Three-Gap Validation Framework} We implemented a comprehensive test suite that simultaneously validates three critical gaps in the proof of 196 being Lychrel: \\begin{enumerate} \\item \\textbf{GAP 1: Quantitative Transfer} - Validates that",
    ", providing strong evidence that 196 cannot converge to a palindrome through the reverse-and-add process. \\subsection{Reproducibility} The validation script and results are fully reproducible: - Source: \\detokenize{verifier/test\\_gap123.py} - Results log: \\detokenize{test\\_3gaps\\_fast\\_*.json} (timestamped) - Runtime:",
    ", quantitative transfer up to",
    ", rank = 1 \\item At",
    ", rank = 1042 \\item At",
    ", rank = 205 \\item At",
    ", rank = 2079 \\end{itemize} The consistent full-row-rank property across diverse matrix dimensions demonstrates that the Hensel obstruction is not a numerical artifact but a fundamental structural property of the 196 trajectory. \\subsubsection{Modular Orbit Analysis} To complement the direct trajectory validation, we analyzed the behavior of the 196 trajectory modulo various bases: \\begin{center} \\begin{tabular}{@{}r r r r@{}} \\toprule \\textbf{Modulus",
    ", so all three components vanish. (",
    ", that no binary carry assignment exists, and that the linearised Jacobian modulo 2 is non-degenerate in the sense described above. We therefore state the practical conclusion used in this manuscript: \"The absence of palindromic transport assignments for 196 is certified by computation up to the bound",
    ", that no binary carry solution exists, and that the Jacobian linearisation modulo 2 is non-degenerate in the sense above. We therefore state the practical conclusion used in this manuscript: \"The absence of palindromic carry assignments for 196 is computationally certified up to modulus",
    ", that no binary carry solution exists, and that the Jacobian linearisation modulo 2 is non-degenerate in the sense described above. We therefore record the practical conclusion used in this manuscript: \"The absence of palindromic carry assignments for 196 is certified by computation up to the bound",
    ", that no binary carry solution exists, and that the Jacobian linearization modulo 2 is non-degenerate as described above. Therefore, we declare the practical conclusion used in this manuscript: \"The absence of palindromic carry assignments for 196 is certified by computation up to the bound",
    ", that no binary carry solution exists, and that the Jacobian linearization modulo 2 is non-degenerate in the sense described above. Therefore, we declare the practical conclusion used in this manuscript: \"The absence of palindromic carry assignments for 196 is certified by computation up to the bound",
    ", that no binary carry solution exists, and that the linearization of the Jacobian modulo",
    ", the Jacobian is invertible modulo",
    ", the absence of a palindromic solution modulo 2 (with non-degenerate Jacobian) implies the absence of a palindromic solution modulo",
    ", the absence of solutions modulo",
    ", the absence of solutions modulo one of the prime-power factors implies absence modulo",
    ", the congruence",
    ", the implicit function / Hensel lifting argument applies: one can successively solve for lifts modulo",
    ", the iterate",
    ", the lifted system \\[ F_k(x) \\equiv 0 \\pmod{2^k} \\] admits no solution",
    ", the linearized constraint matrix contains a",
    ", the linearized constraint matrix has a",
    ", the linearized constraint matrix possesses a",
    ", the maximal observed values of",
    ", the probability of accidental palindrome formation becomes negligibly small: \\begin{itemize} \\item At",
    ", the transfer inequality becomes strictly violated:}\\\\",
    ", then",
    ", then for any carry vector"
  ],
  "paraphrased_examples": [
    "&",
    "(",
    ",",
    "196",
    "887",
    ":",
    "A^{(robust)}",
    "N+rev(N)\\equiv P\\pmod p",
    "S",
    "\\exists",
    "\\leq",
    "c",
    "has no palindromic solution modulo",
    "is palindromic",
    "modulo",
    "or",
    "to",
    "where",
    "x"
  ],
  "missing_keys": [
    "A^{(ext)}",
    "A^{(int)}"
  ]
}