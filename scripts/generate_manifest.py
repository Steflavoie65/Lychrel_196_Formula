"""Generate manifest_sha256.txt for the repository's results/ directory.

Writes a human-readable manifest and a JSON summary.
"""
import hashlib
import json
from pathlib import Path

ROOT = Path(__file__).resolve().parents[1]
RESULTS = ROOT / 'results'
MANIFEST = ROOT / 'manifest_sha256.txt'
MANIFEST_JSON = ROOT / 'results' / 'manifest_sha256.json'

def sha256_of_file(p: Path):
    h = hashlib.sha256()
    with p.open('rb') as f:
        for chunk in iter(lambda: f.read(8192), b''):
            h.update(chunk)
    return h.hexdigest()

def main():
    if not RESULTS.exists():
        print(f"Results directory not found: {RESULTS}")
        return 1

    entries = []
    for p in sorted(RESULTS.rglob('*')):
        if p.is_file():
            rel = p.relative_to(ROOT)
            h = sha256_of_file(p)
            entries.append({'path': str(rel).replace('\\\\','/'), 'sha256': h})

    # Write plain manifest
    with MANIFEST.open('w', encoding='utf-8') as f:
        f.write('# manifest_sha256.txt\n')
        f.write('# Generated by scripts/generate_manifest.py\n')
        f.write('\n')
        for e in entries:
            f.write(f"{e['sha256']}  {e['path']}\n")

    # Write JSON manifest
    with MANIFEST_JSON.open('w', encoding='utf-8') as f:
        json.dump({'generated_by': 'generate_manifest.py', 'entries': entries}, f, indent=2)

    print(f"Wrote {MANIFEST} and {MANIFEST_JSON}")
    return 0

if __name__ == '__main__':
    raise SystemExit(main())
